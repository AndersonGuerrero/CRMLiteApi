type User {
    _id: ID
    name: String!
    lastname: String!
    username: String!
    password: String!
    role: UserRole!
}

type SecureUser {
    _id: ID
    name: String
    lastname: String
    username: String
    role: UserRole
}

type CreateUserOutput {
    error: Boolean
    message: String
}

type authenticationOutput {
    error: Boolean
    message: String
    token: String
}


type Query {
    getUsers(limit: Int, offset: Int): [SecureUser]
    getAuthenticatedUser: SecureUser
}


""" Campos para los usuarios nuevos """
input UserInput {
    name: String!
    lastname: String!
    username: String!
    password: String!
    role: UserRole!
}

enum UserRole {
    ADMIN
    SELLER
}

""" Campos para login de usuarios """
input AuthInput {
    username: String!
    password: String!
}


""" Campos para actualizar usuarios """
input UserUpdateInput {
    _id: ID!
    name: String!
    lastname: String!
    username: String!
    pasword: String
    role: UserRole
}

type Mutation {
    # Nombre del resolver, input con datos y valor que retorna
    """ Permite crear nuevos usuarios """
    createUser(input: UserInput) : CreateUserOutput
    authentication(input: AuthInput) : authenticationOutput
}